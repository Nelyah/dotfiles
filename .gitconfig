[color]
    branch      = auto
    diff        = auto
    status      = auto
    interactive = auto
    status      = auto
    ui          = true
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

# color.decorate.<slot>
#     Use customized color for git log --decorate output.  <slot> is one of branch, remoteBranch, tag,
#     stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively.
[color "decorate"]
    HEAD = "44 bold"
    remoteBranch = 98
    tag = "203 bold"

# color.branch
#     A boolean to enable/disable color in the output of git-branch(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.interactive
#     When set to always, always use colors for interactive prompts and displays (such as those used by
#     "git-add --interactive"). When false (or never), never. When set to true or auto, use colors only
#     when the output is to the terminal. Defaults to false.

# color.diff
#     Whether to use ANSI escape sequences to add color to patches. If this is set to always, git-
#     diff(1), git-log(1), and git-show(1) will use color for all patches. If it is set to true or
#     auto, those commands will only use color when output is to the terminal. Defaults to false.

#     This does not affect git-format-patch(1) nor the git-diff-* plumbing commands. Can be overridden
#     on the command line with the --color[=<when>] option.

# color.pager
#     A boolean to enable/disable colored output when the pager is in use (default is true).

# color.showbranch
#     A boolean to enable/disable color in the output of git-show-branch(1). May be set to always,
#     false (or never) or auto (or true), in which case colors are used only when the output is to a
#     terminal. Defaults to false.

# color.status
#     A boolean to enable/disable color in the output of git-status(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.ui
#     This variable determines the default value for variables such as color.diff and color.grep that
#     control the use of color per command family. Its scope will expand as more commands learn
#     configuration to set a default for the --color option. Set it to always if you want all output
#     not intended for machine consumption to use color, to true or auto if you want such output to use
#     color when written to the terminal, or to false or never if you prefer git commands not to use
#     color unless enabled explicitly with some other configuration or the --color option.


# color.branch.<slot>
#     Use customized color for branch coloration.  <slot> is one of current (the current branch), local
#     (a local branch), remote (a remote-tracking branch in refs/remotes/), plain (other refs).

#     The value for these configuration variables is a list of colors (at most two) and attributes (at
#     most one), separated by spaces. The colors accepted are:
#       normal, black, red, green, yellow, blue, magenta, cyan and white;
#     the attributes are:
#       bold, dim, ul, blink and reverse.
#
#     The first color given is the foreground; the second is the background.
#     The position of the attribute, if any, doesn't matter.

# color.diff.<slot>
#     Use customized color for diff colorization.  <slot> specifies which part of the patch to use the
#     specified color, and is one of plain (context text), meta (metainformation), frag (hunk header),
#     func (function in hunk header), old (removed lines), new (added lines), commit (commit headers),
#     or whitespace (highlighting whitespace errors). The values of these variables may be specified as
#     in color.branch.<slot>.
[color "diff"]
    meta = yellow
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse


# color.interactive.<slot>
#     Use customized color for git add --interactive output.  <slot> may be prompt, header, help or
#     error, for four distinct types of normal output from interactive commands. The values of these
#     variables may be specified as in color.branch.<slot>.

# color.status.<slot>
#     Use customized color for status colorization.  <slot> is one of header (the header text of the
#     status message), added or updated (files which are added but not committed), changed (files which
#     are changed but not added in the index), untracked (files which are not tracked by git), branch
#     (the current branch), or nobranch (the color the no branch warning is shown in, defaulting to
#     red). The values of these variables may be specified as in color.branch.<slot>.
[color "status"]
[alias]
    ane             = commit --amend --no-edit
    cp              = cherry-pick
    st              = status
    ci              = commit
    co              = checkout
    br              = branch
    rbi             = rebase -i
    rb              = rebase
    lint            = "!sh -c 'git status | awk \"/modified/ {print \\$3}\" | xargs -L 1 php -l'"
    logfull         = log --pretty=fuller --graph --stat -p
    cat             = cat-file -p
    unstage         = reset HEAD
    undomerge       = reset --hard ORIG_HEAD
    oups            = commit -a --amend -C HEAD
    lsm             = ls-files -m
    diff            = diff --relative
    push-br         = "!sh -c \"git push --set-upstream origin $(git branch --show-current)\""
    fetch-rbm       = fetch origin master:master
[branch "master"]
    remote = origin
    merge  = refs/heads/master
    rebase = true
[core]
    excludesfile    = ~/.globalgitignore
    eol             = lf
    pager = diff-so-fancy | less --tabs=4 -RFX
[mergetool]
    keepBackup = true
[http]
[user]
	name  = Nelyah
	email = contact@nelyah.eu
[filter "media"]
    clean    = git media clean %f
    smudge   = git media smudge %f
    required = true
[diff]
    tool   = vimdiff
[difftool]
    prompt = false
[tig "color"]
    id = color212 default
    cursor	= white color8 bold underline
[log]
    decorate = full
    date = format:"%Y-%m-%d %H:%M"
[remote "origin"]
	push = HEAD
[submodule]
	fetchJobs = 12

[tig]
    line-graphics         = auto
    main-view             = line-number:no,interval=5 id:yes date:default author:full commit-title:yes,graph,refs,overflow=no
    main-view-date        = custom
    ignore-case           = smart-case
    main-view-date-format = \"%Y-%m-%d %H:%M\"
    mouse                 = yes
    mouse-scroll          = 5
    refresh-mode          = periodic
    refresh-interval      = 1
    tab-size              = 4
    # show untracked files in one dir as a dir like `git status` instead of multiple files
    status-show-untracked-dirs = false
[tig "color"]
    title-focus = cyan default
    title-blur = cyan default
    palette-0 = color24 default ; This is the main graph lines
    palette-1 = color24 default ; this is the merge graph lines


;   !	Run the command in the foreground with output shown.
;   @	Run the command in the background with no output.
;   ?	Prompt the user before executing the command.
;   +	Run the command synchronously, and echo the first line of output to the status bar.
;   <	Exit Tig after executing the command.
;   >	Re-open Tig instantly in the last displayed view after executing the command.
;
; User-defined commands can optionally refer to Tig's internal state
; using the following variable names, which are substituted before
; commands are run:
;
;   %(head)		The current ref ID. Defaults to HEAD
;   %(commit)		The current commit ID.
;   %(blob)		The current blob ID.
;   %(branch)		The current branch name.
;   %(remote)		The current remote name.
;   %(tag)		The current tag name.
;   %(stash)		The current stash name.
;   %(directory)	The current directory path in the tree view;
;			empty for the root directory.
;   %(file)		The currently selected file.
;   %(ref)		The reference given to blame or HEAD if undefined.
;   %(revargs)		The revision arguments passed on the command line.
;   %(fileargs)		The file arguments passed on the command line.
;   %(cmdlineargs)	All other options passed on the command line.
;   %(diffargs)		The diff options from `diff-options` or `TIG_DIFF_OPTS`
;   %(prompt)		Prompt for the argument value.

[tig "bind"]
    generic =    E          !>sh -c "nvim ~/.tigrc"
    generic =    g          none # disable single g
    main    =    f          +git commit --fixup %(commit)
    main    =    r          >git rebase --autosquash -i %(commit)^
    generic =    b          view-refs
    generic =    gs         view-grep
    generic =    gg         move-first-line
    generic =    G          move-last-line
    generic =    p          none # disable single p for pager(default)
    generic =    pl         !git pull
    generic =    pl         !git pull %(remote)
    generic =    pu         !<git push
    generic =    pU         !<git push -u %(remote) %(repo:head)
    main    =    G          move-last-line # overwrite the default
    generic =    <Ctrl-f>   scroll-page-down
    generic =    <Ctrl-b>   scroll-page-up
    refs    =    D          ?+git branch -D %(branch)
    status  =    S           +git stash
    stash   =    P           +git stash pop %(stash)
    stash   =    A           +git stash apply %(stash)
